// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heartbeat.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeartbeatRequest struct {
	Host    string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Term    uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Event   string `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
	Entries []byte `protobuf:"bytes,4,opt,name=entries,proto3" json:"entries,omitempty"`
}

func (m *HeartbeatRequest) Reset()                    { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string            { return proto1.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()               {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *HeartbeatRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HeartbeatRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *HeartbeatRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *HeartbeatRequest) GetEntries() []byte {
	if m != nil {
		return m.Entries
	}
	return nil
}

type HeartbeatResponse struct {
	Peerterm uint64 `protobuf:"varint,1,opt,name=peerterm" json:"peerterm,omitempty"`
	Respcode uint32 `protobuf:"varint,2,opt,name=respcode" json:"respcode,omitempty"`
}

func (m *HeartbeatResponse) Reset()                    { *m = HeartbeatResponse{} }
func (m *HeartbeatResponse) String() string            { return proto1.CompactTextString(m) }
func (*HeartbeatResponse) ProtoMessage()               {}
func (*HeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HeartbeatResponse) GetPeerterm() uint64 {
	if m != nil {
		return m.Peerterm
	}
	return 0
}

func (m *HeartbeatResponse) GetRespcode() uint32 {
	if m != nil {
		return m.Respcode
	}
	return 0
}

func init() {
	proto1.RegisterType((*HeartbeatRequest)(nil), "proto.HeartbeatRequest")
	proto1.RegisterType((*HeartbeatResponse)(nil), "proto.HeartbeatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Heartbeat service

type HeartbeatClient interface {
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type heartbeatClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatClient(cc *grpc.ClientConn) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := grpc.Invoke(ctx, "/proto.Heartbeat/SendHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Heartbeat service

type HeartbeatServer interface {
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

func RegisterHeartbeatServer(s *grpc.Server, srv HeartbeatServer) {
	s.RegisterService(&_Heartbeat_serviceDesc, srv)
}

func _Heartbeat_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Heartbeat/SendHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Heartbeat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHeartbeat",
			Handler:    _Heartbeat_SendHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heartbeat.proto",
}

func init() { proto1.RegisterFile("heartbeat.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xc1, 0x6e, 0xc2, 0x30,
	0x0c, 0x86, 0x97, 0xad, 0xdd, 0x56, 0x6b, 0xd5, 0xb6, 0x08, 0x89, 0xa8, 0xa7, 0xaa, 0xa7, 0x9e,
	0x7a, 0x80, 0x57, 0xe0, 0x80, 0xc4, 0x89, 0xf0, 0x04, 0x2d, 0xb5, 0x54, 0x90, 0x48, 0x42, 0x62,
	0x78, 0x7e, 0x54, 0x57, 0x2d, 0x08, 0x4e, 0xf1, 0xe7, 0x2f, 0xfa, 0x6d, 0xc3, 0x6f, 0x87, 0xb5,
	0xa7, 0x06, 0x6b, 0xaa, 0x9c, 0xb7, 0x64, 0x65, 0xcc, 0x4f, 0x71, 0x84, 0xbf, 0xf5, 0x68, 0x34,
	0x9e, 0x2f, 0x18, 0x48, 0x4a, 0x88, 0x3a, 0x1b, 0x48, 0x89, 0x5c, 0x94, 0x89, 0xe6, 0xba, 0xef,
	0x11, 0xfa, 0x93, 0x7a, 0xcf, 0x45, 0x19, 0x69, 0xae, 0xe5, 0x0c, 0x62, 0xbc, 0xa2, 0x21, 0xf5,
	0xc1, 0x1f, 0x07, 0x90, 0x0a, 0xbe, 0xd0, 0x90, 0x3f, 0x60, 0x50, 0x51, 0x2e, 0xca, 0x1f, 0x3d,
	0x62, 0xb1, 0x81, 0xff, 0x87, 0x59, 0xc1, 0x59, 0x13, 0x50, 0x66, 0xf0, 0xed, 0x10, 0x3d, 0x87,
	0x0b, 0x0e, 0x9f, 0xb8, 0x77, 0x1e, 0x83, 0xdb, 0xdb, 0x16, 0x79, 0x70, 0xaa, 0x27, 0x5e, 0x6c,
	0x21, 0x99, 0xc2, 0xe4, 0x0a, 0xd2, 0x1d, 0x9a, 0xf6, 0xde, 0x98, 0x0f, 0x57, 0x56, 0xcf, 0xb7,
	0x65, 0xea, 0x55, 0x0c, 0x8b, 0x14, 0x6f, 0xcd, 0x27, 0xab, 0xe5, 0x2d, 0x00, 0x00, 0xff, 0xff,
	0xd8, 0x46, 0x0e, 0x2d, 0x2c, 0x01, 0x00, 0x00,
}
